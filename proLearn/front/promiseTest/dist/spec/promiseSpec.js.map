{"version":3,"sources":["../../spec/promiseSpec.js"],"names":["Promise","states","describe","it","expect","toEqual","promise","toBe"],"mappings":";;;;;;;;AAAA;;IAEMA,O;AACF,uBAAa;AAAA;;AACT,aAAKC,MAAL,GAAc,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,CAAd;AACH;;;;+BACK,CAAE;;;;;;AAEZC,SAAS,SAAT,EAAmB,YAAW;;AAE1BC,OAAG,OAAH,EAAW,YAAI;AACZC,sBAAcJ,OAAd,yCAAcA,OAAd,GAAuBK,OAAvB,CAA+B,UAA/B;AACF,KAFD;AAGAF,OAAG,OAAH,EAAW,YAAI;AACX,YAAIG,UAAU,IAAIN,OAAJ,EAAd;AACAI,eAAOE,QAAQL,MAAf,EAAuBI,OAAvB,CAA+B,CAAC,SAAD,EAAY,YAAZ,EAA0B,UAA1B,CAA/B;AACH,KAHD;AAIAF,OAAG,cAAH,EAAkB,YAAI;AAClB;AACA;AACA;AACAC,eAAO,IAAP,EAAaG,IAAb,CAAkB,KAAlB;AACH,KALD;AAMH,CAfD","file":"promiseSpec.js","sourcesContent":["// import {expect} from 'chai';\n\nclass Promise {\n    constructor(){\n        this.states = ['Pending', 'Fullfilled', 'Rejected'];\n    };\n    then(){};\n}\ndescribe('Promise',function() {\n\n    it('是一个函数',()=>{\n       expect(typeof Promise).toEqual('function')\n    });\n    it('有三个状态',()=>{\n        let promise = new Promise();\n        expect(promise.states).toEqual(['Pending', 'Fullfilled', 'Rejected']);\n    });\n    it('必须提供一个then方法',()=>{\n        // for (let prototypeKey in Promise.prototype) {\n        //     expect(true).toBe(false);\n        // }\n        expect(true).toBe(false);\n    });\n});\n"]}